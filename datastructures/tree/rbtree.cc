/**
 * 一、平衡二叉查找树
 * 1、特点
 * （1）任一节点的左右子树的高度差不能超过1。
 * （2）任一节点的左节点小于该节点，右节点大于等于该节点。
 * 2、栗子：AVL树、Splay tree、Treap 。
 * 3、需要平衡的原因：防止二叉查找树在频繁地插入和删除的情况下出现退化成链表的问题。
 * 
 * 二、红黑树
 * 1、特点
 * （1）根节点是黑色的。
 * （2）所有的叶节点都是空并且是黑色的。（主要为了简化红黑树代码的实现）
 * （3）任何相邻的节点不能都为红色。
 * （4）任意节点到其所有可达的叶子节点的所有路径上，黑色节点的数目相同。
 * 
 * 三、红黑树较AVL树为什么更常见。
 * 增、删操作下效率有较大差别。
 * （1）AVL树是一种高度平衡的树，查找效率很高，但是在增、删的情况下，
 * 为了维持高度平衡的状态，导致效率下降。
 * （2）红黑树是一种近似平衡的树，树的高度最大仅仅比AVL树大一倍，时间复杂度不会
 * 下降很多，而且稳定性较好。
 * 综上，红黑树在实际工程应用中更加常用。
 * 
 * 四、历史进化
 *              二叉搜索树
 *   
 *                  |       ----------> 避免退化成链表。
 * 
 *            二叉平衡搜索树
 * 
 *                  |       ----------> 避免插入、删除耗时过大。
 * 
 *        二叉近似平衡树（红黑树）
 * 
 * 五、相关代码参考 linux 内核中红黑树的实现。
*/